{"version":3,"sources":["../node_modules/refractor/lang/erlang.js"],"names":["erlang","Prism","languages","comment","string","pattern","greedy","alias","boolean","keyword","number","function","variable","lookbehind","operator","atom","punctuation","module","exports","displayName","aliases"],"mappings":"uGAKA,SAASA,EAAOC,GACdA,EAAMC,UAAUF,OAAS,CACvBG,QAAS,MACTC,OAAQ,CACNC,QAAS,wBACTC,QAAQ,GAEV,kBAAmB,CACjBD,QAAS,8BACTE,MAAO,YAET,cAAe,CACbF,QAAS,wBACTE,MAAO,QAETC,QAAS,qBACTC,QAAS,0DACTC,OAAQ,CACN,SACA,iBACA,0CAEFC,SAAU,sBACVC,SAAU,CAERP,QAAS,gCACTQ,YAAY,GAEdC,SAAU,CACR,+GACA,CAEET,QAAS,iBACTQ,YAAY,GAEd,CAEER,QAAS,iBACTQ,YAAY,IAGhBE,KAAM,gBACNC,YAAa,yBA7CjBC,EAAOC,QAAUlB,EACjBA,EAAOmB,YAAc,SACrBnB,EAAOoB,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_erlang.93343e9b.chunk.js","sourcesContent":["'use strict'\n\nmodule.exports = erlang\nerlang.displayName = 'erlang'\nerlang.aliases = []\nfunction erlang(Prism) {\n  Prism.languages.erlang = {\n    comment: /%.+/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    'quoted-function': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n      alias: 'function'\n    },\n    'quoted-atom': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n      alias: 'atom'\n    },\n    boolean: /\\b(?:true|false)\\b/,\n    keyword: /\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,\n    number: [\n      /\\$\\\\?./,\n      /\\d+#[a-z0-9]+/i,\n      /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    ],\n    function: /\\b[a-z][\\w@]*(?=\\()/,\n    variable: {\n      // Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\n      pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n      lookbehind: true\n    },\n    operator: [\n      /[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/,\n      {\n        // We don't want to match <<\n        pattern: /(^|[^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /(^|[^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    atom: /\\b[a-z][\\w@]*/,\n    punctuation: /[()[\\]{}:;,.#|]|<<|>>/\n  }\n}\n"],"sourceRoot":""}